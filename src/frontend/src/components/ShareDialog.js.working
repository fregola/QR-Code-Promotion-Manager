import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  IconButton,
  Snackbar,
  Grid,
  Paper,
  Divider,
  TextField,
  Chip,
  List,
  ListItem,
  ListItemIcon,
  ListItemText
} from '@mui/material';
import {
  WhatsApp as WhatsAppIcon,
  Telegram as TelegramIcon,
  Email as EmailIcon,
  Facebook as FacebookIcon,
  Twitter as TwitterIcon,
  LinkedIn as LinkedInIcon,
  Link as LinkIcon,
  Share as ShareIcon,
  Close as CloseIcon,
  ContentCopy as ContentCopyIcon
} from '@mui/icons-material';
import { useAuth } from '../context/AuthContext';

const ShareDialog = ({ open, onClose, qrCode }) => {
  const [customMessage, setCustomMessage] = useState('');
  const [recipientName, setRecipientName] = useState('');
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [shareHistory, setShareHistory] = useState([]);
  const { token } = useAuth();
  
  // Carica la cronologia delle condivisioni dalle API
  useEffect(() => {
    const loadShareHistory = async () => {
      if (!qrCode?.code || !token) return;
      
      try {
        const response = await fetch(`/api/qrcodes/${qrCode.code}/shares`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (response.ok) {
          const result = await response.json();
          const formattedHistory = result.data.shares.map(share => ({
            id: share._id,
            platform: share.platform,
            message: share.message,
            recipient: share.recipient,
            timestamp: new Date(share.timestamp).toLocaleString('it-IT'),
            url: `${window.location.origin}/qrcode/${qrCode.code}`
          }));
          setShareHistory(formattedHistory);
        } else {
          // Fallback a localStorage se API fallisce
          const savedHistory = localStorage.getItem(`share_history_${qrCode.code}`);
          if (savedHistory) {
            setShareHistory(JSON.parse(savedHistory));
          }
        }
      } catch (error) {
        console.error('Errore nel caricare cronologia:', error);
        // Fallback a localStorage
        const savedHistory = localStorage.getItem(`share_history_${qrCode.code}`);
        if (savedHistory) {
          setShareHistory(JSON.parse(savedHistory));
        }
      }
    };

    loadShareHistory();
  }, [qrCode?.code, token]);
  
  if (!qrCode) return null;
  
  const publicUrl = `${window.location.origin}/qrcode/${qrCode.code}`;
  const defaultMessage = `Guarda questa promozione: ${qrCode.promotion?.name || 'QR Code'}`;
  const shareText = customMessage || defaultMessage;
  const fullMessage = `${shareText}\n\n${publicUrl}`;

  // Funzione per aggiungere una condivisione alla cronologia
  const addToShareHistory = async (platform, message, recipient = null) => {
    const newShare = {
      id: Date.now(),
      platform,
      message,
      recipient: recipient || null,
      timestamp: new Date().toLocaleString('it-IT'),
      url: publicUrl
    };

    try {
      // Salva nel backend
      const response = await fetch(`/api/qrcodes/${qrCode.code}/share`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          platform,
          message,
          recipient
        })
      });

      if (response.ok) {
        const result = await response.json();
        const formattedHistory = result.data.shares.map(share => ({
          id: share._id,
          platform: share.platform,
          message: share.message,
          recipient: share.recipient,
          timestamp: new Date(share.timestamp).toLocaleString('it-IT'),
          url: publicUrl
        }));
        setShareHistory(formattedHistory);
      } else {
        // Fallback a localStorage se API fallisce
        const updatedHistory = [newShare, ...shareHistory].slice(0, 10);
        setShareHistory(updatedHistory);
        localStorage.setItem(`share_history_${qrCode.code}`, JSON.stringify(updatedHistory));
      }
    } catch (error) {
      console.error('Errore nel salvare condivisione:', error);
      // Fallback a localStorage
      const updatedHistory = [newShare, ...shareHistory].slice(0, 10);
      setShareHistory(updatedHistory);
      localStorage.setItem(`share_history_${qrCode.code}`, JSON.stringify(updatedHistory));
    }
    
    // Reset del campo nome destinatario dopo la condivisione
    setRecipientName('');
  };

  const handleWhatsAppShare = () => {
    const message = `${shareText}\n\n${publicUrl}`;
    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(message)}`;
    
    window.open(whatsappUrl, '_blank');
    addToShareHistory('WhatsApp', shareText, recipientName.trim() || null);
  };

  const tryOpenApp = (appUrl, webUrl, windowOptions = '_blank') => {
    // Prova ad aprire l'app
    const startTime = Date.now();
    const iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    iframe.src = appUrl;
    document.body.appendChild(iframe);
    
    // Rimuovi l'iframe dopo un breve periodo
    setTimeout(() => {
      document.body.removeChild(iframe);
    }, 100);
    
    // Se dopo 1.5 secondi la pagina è ancora attiva, apri la versione web
    setTimeout(() => {
      const endTime = Date.now();
      // Se la differenza di tempo è piccola, probabilmente l'app non si è aperta
      if (endTime - startTime < 2000) {
        window.open(webUrl, windowOptions);
      }
    }, 1500);
  };

  const handleSmsShare = () => {
    const message = `${shareText}\n\n${publicUrl}`;
    const smsUrl = `sms:?body=${encodeURIComponent(message)}`;
    
    window.open(smsUrl);
    addToShareHistory('SMS', shareText, recipientName.trim() || null);
  };

  const handleTelegramShare = () => {
    const telegramApp = `tg://msg_url?url=${encodeURIComponent(publicUrl)}&text=${encodeURIComponent(shareText)}`;
    const telegramWeb = `https://t.me/share/url?url=${encodeURIComponent(publicUrl)}&text=${encodeURIComponent(shareText)}`;
    
    tryOpenApp(telegramApp, telegramWeb);
    addToShareHistory('Telegram', shareText, recipientName.trim() || null);
  };

  const handleEmailShare = () => {
    const subject = shareText;
    const body = `Ciao!\n\n${shareText}\n\n${publicUrl}\n\nSaluti`;
    const emailUrl = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    
    window.open(emailUrl);
    addToShareHistory('Email', shareText, recipientName.trim() || null);
  };

  const handleFacebookShare = () => {
    const facebookApp = `fb://share?link=${encodeURIComponent(publicUrl)}`;
    const facebookWeb = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(publicUrl)}`;
    
    tryOpenApp(facebookApp, facebookWeb, 'width=600,height=400');
    addToShareHistory('Facebook', shareText, recipientName.trim() || null);
  };

  const handleTwitterShare = () => {
    const twitterApp = `twitter://post?message=${encodeURIComponent(shareText + ' ' + publicUrl)}`;
    const twitterWeb = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(publicUrl)}`;
    
    tryOpenApp(twitterApp, twitterWeb, 'width=600,height=400');
    addToShareHistory('Twitter', shareText, recipientName.trim() || null);
  };

  const handleLinkedInShare = () => {
    const linkedinApp = `linkedin://sharing/share-offsite/?url=${encodeURIComponent(publicUrl)}`;
    const linkedinWeb = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(publicUrl)}`;
    
    tryOpenApp(linkedinApp, linkedinWeb, 'width=600,height=400');
    addToShareHistory('LinkedIn', shareText, recipientName.trim() || null);
  };

  const handleCopyLink = async () => {
    try {
      if (navigator.clipboard && navigator.clipboard.writeText) {
        await navigator.clipboard.writeText(publicUrl);
        setSnackbarMessage('Link copiato negli appunti!');
      } else {
        // Fallback per browser che non supportano l'API Clipboard
        const textArea = document.createElement('textarea');
        textArea.value = publicUrl;
        textArea.style.position = 'fixed';
        textArea.style.opacity = '0';
        document.body.appendChild(textArea);
        textArea.select();
        const successful = document.execCommand('copy');
        document.body.removeChild(textArea);
        
        if (successful) {
          setSnackbarMessage('Link copiato negli appunti!');
        } else {
          setSnackbarMessage('Impossibile copiare automaticamente. Link: ' + publicUrl);
        }
      }
      setSnackbarOpen(true);
      addToShareHistory('Copia Link', shareText, recipientName.trim() || null);
    } catch (error) {
      console.error('Errore durante la copia:', error);
      setSnackbarMessage('Errore durante la copia. Link: ' + publicUrl);
      setSnackbarOpen(true);
    }
  };

  const handleNativeShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `QR Code: ${qrCode.code}`,
          text: shareText,
          url: publicUrl,
        });
        addToShareHistory('Condivisione Nativa', shareText, recipientName.trim() || null);
      } catch (error) {
        if (error.name !== 'AbortError') {
          console.error('Errore durante la condivisione nativa:', error);
        }
      }
    }
  };

  const shareOptions = [
    {
      name: 'WhatsApp',
      icon: <WhatsAppIcon sx={{ fontSize: 40, color: '#25D366' }} />,
      onClick: handleWhatsAppShare,
      description: 'Condividi su WhatsApp'
    },
    {
      name: 'Telegram',
      icon: <TelegramIcon sx={{ fontSize: 40, color: '#0088cc' }} />,
      onClick: handleTelegramShare,
      description: 'Condividi su Telegram'
    },
    {
      name: 'SMS',
      icon: <Typography sx={{ fontSize: 40, fontWeight: 'bold', color: '#4CAF50' }}>SMS</Typography>,
      onClick: handleSmsShare,
      description: 'Condividi via SMS'
    },
    {
      name: 'Email',
      icon: <EmailIcon sx={{ fontSize: 40, color: '#FF5722' }} />,
      onClick: handleEmailShare,
      description: 'Condividi via Email'
    },
    {
      name: 'Facebook',
      icon: <FacebookIcon sx={{ fontSize: 40, color: '#1877F2' }} />,
      onClick: handleFacebookShare,
      description: 'Condividi su Facebook'
    },
    {
      name: 'Twitter',
      icon: <TwitterIcon sx={{ fontSize: 40, color: '#1DA1F2' }} />,
      onClick: handleTwitterShare,
      description: 'Condividi su Twitter'
    },
    {
      name: 'LinkedIn',
      icon: <LinkedInIcon sx={{ fontSize: 40, color: '#0A66C2' }} />,
      onClick: handleLinkedInShare,
      description: 'Condividi su LinkedIn'
    },
    {
      name: 'Copia Link',
      icon: <ContentCopyIcon sx={{ fontSize: 40, color: '#9C27B0' }} />,
      onClick: handleCopyLink,
      description: 'Copia link negli appunti'
    }
  ];

  // Aggiungi condivisione nativa se supportata
  if (navigator.share) {
    shareOptions.push({
      name: 'Condividi',
      icon: <ShareIcon sx={{ fontSize: 40, color: '#2196F3' }} />,
      onClick: handleNativeShare,
      description: 'Usa la condivisione del sistema'
    });
  }

  return (
    <>
      <Dialog 
        open={open} 
        onClose={onClose} 
        maxWidth="md" 
        fullWidth
        PaperProps={{
          sx: {
            maxHeight: '90vh',
            overflow: 'auto'
          }
        }}
      >
        <DialogTitle>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            <Typography variant="h6">
              Condividi QR Code: {qrCode?.code}
            </Typography>
            <IconButton onClick={onClose}>
              <CloseIcon />
            </IconButton>
          </Box>
        </DialogTitle>
        
        <DialogContent>
          {/* URL pubblico */}
          <Paper elevation={1} sx={{ p: 2, mb: 3, bgcolor: '#f5f5f5' }}>
            <Typography variant="subtitle2" gutterBottom>
              Link pubblico:
            </Typography>
            <Typography 
              variant="body2" 
              sx={{ 
                wordBreak: 'break-all',
                fontFamily: 'monospace',
                bgcolor: 'white',
                p: 1,
                border: '1px solid #ddd',
                borderRadius: 1
              }}
            >
              {publicUrl}
            </Typography>
          </Paper>

          {/* Messaggio personalizzato */}
          <TextField
            fullWidth
            label="Messaggio personalizzato (opzionale)"
            value={customMessage}
            onChange={(e) => setCustomMessage(e.target.value)}
            placeholder={defaultMessage}
            multiline
            rows={2}
            margin="normal"
            sx={{ mb: 2 }}
          />

          {/* Nome destinatario */}
          <TextField
            fullWidth
            label="Nome destinatario (opzionale)"
            value={recipientName}
            onChange={(e) => setRecipientName(e.target.value)}
            placeholder="es. Mario Rossi"
            margin="normal"
            sx={{ mb: 3 }}
          />

          {/* Anteprima messaggio */}
          <Paper elevation={1} sx={{ p: 2, mb: 3, bgcolor: '#e3f2fd' }}>
            <Typography variant="subtitle2" gutterBottom>
              Anteprima messaggio:
            </Typography>
            <Typography variant="body2" sx={{ whiteSpace: 'pre-line' }}>
              {fullMessage}
            </Typography>
          </Paper>

          {/* Opzioni di condivisione */}
          <Typography variant="h6" gutterBottom>
            Scegli come condividere:
          </Typography>
          
          <Grid container spacing={2} sx={{ mb: 3 }}>
            {shareOptions.map((option, index) => (
              <Grid item xs={6} sm={4} md={3} key={index}>
                <Paper 
                  elevation={2}
                  sx={{
                    p: 2,
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                    '&:hover': {
                      elevation: 4,
                      transform: 'translateY(-2px)',
                      bgcolor: '#f5f5f5'
                    }
                  }}
                  onClick={option.onClick}
                >
                  {option.icon}
                  <Typography 
                    variant="caption" 
                    align="center" 
                    sx={{ mt: 1, fontWeight: 'bold' }}
                  >
                    {option.name}
                  </Typography>
                </Paper>
              </Grid>
            ))}
          </Grid>

          {/* Cronologia condivisioni */}
          {shareHistory.length > 0 && (
            <>
              <Divider sx={{ my: 3 }} />
              <Typography variant="h6" gutterBottom>
                Cronologia condivisioni:
              </Typography>
              <List sx={{ maxHeight: 200, overflow: 'auto' }}>
                {shareHistory.map((share) => (
                  <ListItem key={share.id}>
                    <ListItemIcon>
                      <Chip 
                        size="small" 
                        label={share.platform} 
                        color="primary" 
                        variant="outlined"
                      />
                    </ListItemIcon>
                    <ListItemText
                      primary={share.message}
                      secondary={
                        <Box>
                          {share.recipient && (
                            <Typography variant="caption" display="block">
                              Destinatario: {share.recipient}
                            </Typography>
                          )}
                          <Typography variant="caption" color="text.secondary">
                            {share.timestamp}
                          </Typography>
                        </Box>
                      }
                    />
                  </ListItem>
                ))}
              </List>
            </>
          )}
        </DialogContent>
        
        <DialogActions>
          <Button onClick={onClose}>
            Chiudi
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={() => setSnackbarOpen(false)}
        message={snackbarMessage}
      />
    </>
  );
};

export default ShareDialog;
